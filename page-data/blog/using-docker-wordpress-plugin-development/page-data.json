{"componentChunkName":"component---src-pages-blog-mdx-fields-slug-js-content-file-path-home-runner-work-personal-site-generator-personal-site-generator-blog-using-docker-wordpress-plugin-development-index-mdx","path":"/blog/using-docker-wordpress-plugin-development/","result":{"data":{"allMdx":{"edges":[{"previous":null,"node":{"frontmatter":{"title":"Add TypeScript to Existing Vite Project","description":"You know what's awesome? Vite! You know what's even more awesome? Vite with TypeScript! Got an existing Vite project? Follow these steps to add TypeScript to an existing Vite project.","publishedDate":"2022-11-24","prettyPublishedDate":"Nov 24, 2022","modifiedDate":"2022-11-24","prettyModifiedDate":"Nov 24, 2022"},"fields":{"slug":"add-typescript-existing-vite-project"},"body":"\nRecently, I added TypeScript to my personal project, [Payday Calendar Generator](https://github.com/AndyN9/payday-calendar-generator), a React project using Vite as the bundler. Here's what I learned:\n\n## Initial Project Changes\nThese steps only work for existing React projects using Vite. Conveniently, it's a handful of steps since Vite supports TypeScript really well.\n\n**NOTE:** This tutorial will utilize the official [Vite + React + TS StackBlitz](https://stackblitz.com/edit/vitejs-vite-s7vyi2?file=index.html&terminal=dev) for files and references.\n\n### Update configuration files\n- Create TypeScript config files (`tsconfig.json` and `tsconfig.node.json`) in project root\n  - Copy the respective config content from the StackBlitz example\n- Refactor Vite config file from `vite.config.js` to `vite.config.ts`\n- Create a `src/vite-env.d.ts`\n  - Copy the respective config content from the StackBlitz example\n- Modify `package.json`'s `npm run build script`\n  - Update from `\"build\": \"vite build\",` to `\"build\": \"tsc && vite build\",`\n\n### Update entry point\n- Refactor `main.jsx` to `main.tsx`\n- Update `index.html` to include `main.tsx`\n\n**NOTE:** At this point, the Vite project should be ready for TypeScript compilation, but as always, test the project to see if anything is not configured correctly. Here's some additional task I had to do.\n\n### Additional tasks\n- Update `.js` / `.jsx` filename globs to include `.ts` / `.tsx` where necessary\n  - Like `tailwind.config.js`\n\n## Start Migration\nNow the fun starts! My strategy was to update each file (and associated test file) to TypeScript one at a time. This flow was my guide for each file.\n\n- Rename file from `.js` / `.jsx` to `.ts` / `.tsx`\n- Convert CommonJS modules to ES6 modules\n- Add types!\n\n## Conclusion\nVite is a blazing-fast bundler, and adding TypeScript to a Vite project will make development even more pleasant.\n","id":"ba19e40d-8e5f-5f13-8923-36f67c6f8233"},"next":{"frontmatter":{"title":"Using Docker for WordPress Plugin Development"},"fields":{"slug":"using-docker-wordpress-plugin-development"}}},{"previous":{"frontmatter":{"title":"Add TypeScript to Existing Vite Project"},"fields":{"slug":"add-typescript-existing-vite-project"}},"node":{"frontmatter":{"title":"Using Docker for WordPress Plugin Development","description":"Avoid the decision paralysis of deciding which local WordPress environment tool to use. The future is now! Use Docker to containerize your WordPress plugin development workflow.","publishedDate":"2022-11-03","prettyPublishedDate":"Nov 03, 2022","modifiedDate":"2022-11-03","prettyModifiedDate":"Nov 03, 2022"},"fields":{"slug":"using-docker-wordpress-plugin-development"},"body":"- [About and Why Docker](#about-and-why-docker)\n- [Prerequisites](#prerequisites)\n- [YML Rundown](#yml-rundown)\n- [Start Developing!](#start-developing)\n- [Additional Resources](#additional-resources)\n\nFor some developers, setting up infrastructure is the last thing a developer wants to do. WordPress, in particular, requires a MySQL database and a PHP environment, the old reliable LAMP stack, to be setup before developers can begin the famous 5 minute WordPress install. While there are solutions like [MAMP](https://www.mamp.info) or [Local](https://localwp.com/) which can handle the grunt work, I prefer [Docker](https://github.com/docker/awesome-compose/tree/master/official-documentation-samples/wordpress) for setting up a local development environment for making WordPress plugins.\n\n## About and Why Docker\nDocker is a suite of technologies which allows developers to *\"easily\"* create application environments via [containers](https://en.wikipedia.org/wiki/OS-level_virtualization). These containers solve the age-old software developer colloquy, *\"It worked on my machine.\"* In this guide, I'll be using [Docker Compose](https://docs.docker.com/compose/), which allows developers to describe the application environment via YAML and then start and stop services via CLI.\n\nComparing Docker to other local development WordPress environment technologies, I believe there is a higher learning curve with Docker.\nHowever, I think the advantages exceed the disadvantages, particularly in terms of automation and consistency of the environment.\n\n## Prerequisites\n- Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n- Create a `docker-compose.yml` file in the project root\n- (Optional) A plugin directory to serve as the project root\n\n## YML Rundown\n```yaml\nservices:\n  db:\n    image: mysql:latest\n    command: '--default-authentication-plugin=mysql_native_password'\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=root\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=wordpress\n      - MYSQL_PASSWORD=wordpress\n    expose:\n      - 3306\n      - 33060\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - 8080:80\n    restart: always\n    environment:\n      - WORDPRESS_DB_HOST=db\n      - WORDPRESS_DB_USER=wordpress\n      - WORDPRESS_DB_PASSWORD=wordpress\n      - WORDPRESS_DB_NAME=wordpress\n    volumes:\n      - wordpress_instance:/var/www/html\n      - .:/var/www/html/wp-content/plugins/[plugin-name]\nvolumes:\n  db_data:\n  wordpress_instance:\n```\n\nCopy the above YML configuration to the `docker-compose.yml` file. Here's a rundown on what's going on:\n- 2 services: `db` and `wordpress`\n  - both pulling from the latest images ([`mysql`](https://hub.docker.com/_/mysql) and [`wordpress`](https://hub.docker.com/_/wordpress))\n  - `db` service is a `mysql` database with the ports `3306` and `33060` expose for `wordpress` service to connect to\n  - `wordpress` service has the container port `80` to the host machine port `8080` which allows the local development url `http://localhost:8080/`\n    - **NOTE:** If the `docker-compose.yml` was in a plugin project directory, be sure to rename the volume binding `.:/var/www/html/wp-content/plugins/[plugin-name]` to correct plugin name in slug case\n- 2 persistent volumes: `db_data` and `wordpress_instance`\n  - both are mapped in each respective service\n\n## Start Developing!\nFrom the project root, run:\n```\ndocker compose up -d\n```\n\nThis command will build the services as describe in the `docker-compose.yml`. The flag `-d` will run the containers in the background.\n\nCongratulations! A local WordPress instance should be accessible at `http://localhost:8080/` and WordPress '5-min install' should now be accessible! After the install, plugin development can commence!\n\n**NOTE:** If the `docker-compose.yml` was in a plugin project directory, then the plugin can be activated!\n\nTo stop the WordPress instance container, run:\n```\ndocker compose down\n```\n\nAlternatively, to delete the WordPress data, run:\n```\ndocker compose down -v\n```\n\nThe flag `-v` will remove the persistent volumes.\n\n## Additional Resources\n- [https://github.com/docker/awesome-compose/tree/master/wordpress-mysql](https://github.com/docker/awesome-compose/tree/master/wordpress-mysql)\n- [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)\n- [https://docs.docker.com/compose/reference/](https://docs.docker.com/compose/reference/)\n","id":"146393b5-fa36-5607-bb26-93209c2b3a7f"},"next":{"frontmatter":{"title":"How I Start a Personal React Project in 2022"},"fields":{"slug":"start-personal-react-project-2022"}}},{"previous":{"frontmatter":{"title":"Using Docker for WordPress Plugin Development"},"fields":{"slug":"using-docker-wordpress-plugin-development"}},"node":{"frontmatter":{"title":"How I Start a Personal React Project in 2022","description":"Starting a personal React project, a single page app (SPA), in 2022 using Vite, GitHub Pages, and  miscellaneous technologies.","publishedDate":"2022-05-05","prettyPublishedDate":"May 05, 2022","modifiedDate":"2022-05-05","prettyModifiedDate":"May 05, 2022"},"fields":{"slug":"start-personal-react-project-2022"},"body":"- [Initial Project Setup](#initial-project-setup)\n- [Prepping Vite for GitHub Pages](#prepping-vite-for-github-pages)\n- [Wrap Up](#wrap-up)\n\nRecently, I wrapped up two personal React projects: [Payday Calendar Generator](https://github.com/AndyN9/payday-calendar-generator) and [Personal Finance Prime Directive](https://github.com/AndyN9/personalfinance-prime-directive), and wanted to share this reference sheet on how I would start a React project, specifically a SPA, in 2022.\n\n**Main Technologies**\n- [React](https://reactjs.org/), UI library\n- [Vite](https://vitejs.dev/), build tool\n- [GitHub Pages](https://pages.github.com/), static site host\n\nLet's get started and open the terminal!\n\n## Initial Project Setup\n- Run `npm create vite@latest <project-name> -- --template react` to create a boilerplate files using Vite with the React template\n- Run `cd <project-name>`\n- Run `npx install-peerdeps --dev eslint-config-wesbos` ; my preference for linters configuration\n- Run `code . -n` to opens VScode in new window\n- Clean up `package.json`\n  - set `\"version\": 0.0.0,`\n  - update `\"description\": \"\",`\n  - set `\"author\": \"Andy Nguyen <13814584+AndyN9@users.noreply.github.com>\",`\n  - finish linters setup\n    - ```\n      \"scripts\": {\n        ...\n        \"lint\": \"eslint .\",\n        \"lint:fix\": \"eslint . --fix\"\n      },\n      \"eslintConfig\": {\n        \"extends\": [\n          \"wesbos\"\n        ]\n      },\n      \"browserslist\": [\n        \"defaults\"\n      ],\n      ```\n  - clean up starter files\n    - lint files\n    - remove SVGs\n- `git init`\n- Ready to code <Emoji symbol=\"👨‍💻\" />!\n\n## Prepping Vite for GitHub Pages\nAfter I'm done with the project, I like to go ahead and build the project files into the `/docs` folder and commit them to the repository so the project can be hosted on GitHub Pages. In order to do that, these settings need to be made to the Vite config file.\n\n```javascript\n/* eslint-disable import/no-extraneous-dependencies */\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  base: './', // to rewrite assets to correct paths\n  plugins: [react()],\n  build: {\n    outDir: 'docs', // build out the project to docs directory\n  },\n});\n```\n\nThen go ahead and run `npm run build` and commit everything (the `docs` folder) to the repo and push  itto GitHub. In order for the project to get picked up by GitHub Pages, follow these [instructions to change the publishing source](https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site).\n\n## Wrap Up\nThis quick and easy setup is good for testing React ideas. Vite is blazing fast, but another alternative is the tried and true [create-react-app](https://create-react-app.dev/). Otherwise, if I were building a more serious project or needed more capabilities, I would lean towards [Gatsby](https://www.gatsbyjs.com/) or [Next.js](https://nextjs.org/).\n","id":"27a4b8ca-e85d-5ea2-ad35-bfafd225efd6"},"next":{"frontmatter":{"title":"Asking GitHub Copilot for Financial Advice (a First Look at GitHub Copilot)"},"fields":{"slug":"asking-github-copilot-financial-advice-first-look-github-copilot"}}},{"previous":{"frontmatter":{"title":"How I Start a Personal React Project in 2022"},"fields":{"slug":"start-personal-react-project-2022"}},"node":{"frontmatter":{"title":"Asking GitHub Copilot for Financial Advice (a First Look at GitHub Copilot)","description":"First look review of GitHub Copilot; a AI tool which autosuggest whole lines or entire functions right inside the editor.","publishedDate":"2022-04-14","prettyPublishedDate":"Apr 14, 2022","modifiedDate":"2022-04-14","prettyModifiedDate":"Apr 14, 2022"},"fields":{"slug":"asking-github-copilot-financial-advice-first-look-github-copilot"},"body":"- [GitHub Copilot is Pretty Cool](#github-copilot-is-pretty-cool)\n- [Asking for Financial Advice](#asking-for-financial-advice)\n- [Future Predictions](#future-predictions)\n\nRecently, I was invited to the GitHub Copilot Technical Preview and have been using the tool for two weeks. So far, I'm pretty impressed with the capability of [GitHub Copilot](https://copilot.github.com/). After installing the GitHub Copilot extension for VSCode, I started a project right away and decided on [re-creating an income spending flowchart from the /r/personalfinance subreddit](https://github.com/AndyN9/personalfinance-prime-directive).\n\n## GitHub Copilot is Pretty Cool\nAs advertised, GitHub Copilot was able to autosuggest working functions from only the name and assist me in filling repetitive array items. Impressively, the AI-powered tool was able to 'read' the context of the project and adjust its suggestions accordingly.\n\nSurprisingly, GitHub Copilot was providing me financial advise while I was typing out the individual step descriptions.\n\n![GitHub Copilot suggesting to build an emergency fund](./copilot-advice.png)\n\nLet's look into it and get some financial advice from Github Copilot!\n\n## Asking for Financial Advice\n**Disclaimer:** This demonstration is for humor purposes only and is not to be taken as actual financial advice.\n\n```txt\nq: What should I invest in?\na: You should invest in stocks, bonds, and mutual funds.\n```\n\nIs AI advising me to diversify my portfolio?\n\n```txt\nq: Which stock should I invest in?\na: I would invest in the stock with the highest P/E ratio.\n```\n\nIt's quite interesting that GitHub Copilot delivers general recommendations rather than a specific stock recommendation.\n\n```txt\nq: Which crypto should I invest in?\na: I’m not sure. I’m a crypto enthusiast, but I’m not sure what to invest in.\n```\nI love the honesty of the AI-powered tool <Emoji symbol=\"🤣\" />!\n\n## Future Predictions\nDespite the fact that I've only been using GitHub Copilot for three weeks, I'm already pleased by its potential to supercharge the developer experience in terms of autosuggestion. More AI-powered code editor tools are something I'm looking forward to seeing in the future.\n","id":"2f0667fd-b76e-5d66-a3f8-7ba7918099bb"},"next":{"frontmatter":{"title":"How To Deploy Gatsby to GitHub Pages With gh-pages and GitHub Actions"},"fields":{"slug":"deploy-gatsby-github-pages-gh-pages-github-actions"}}},{"previous":{"frontmatter":{"title":"Asking GitHub Copilot for Financial Advice (a First Look at GitHub Copilot)"},"fields":{"slug":"asking-github-copilot-financial-advice-first-look-github-copilot"}},"node":{"frontmatter":{"title":"How To Deploy Gatsby to GitHub Pages With gh-pages and GitHub Actions","description":"A tutorial showing how to deploy a Gatsby project to GitHub Pages with gh-pages and GitHub Actions. Also, this tutorial will show you how to automatically deploy a Gatsby project git repo to another git repo.","publishedDate":"2022-03-24","prettyPublishedDate":"Mar 24, 2022","modifiedDate":"2022-03-24","prettyModifiedDate":"Mar 24, 2022"},"fields":{"slug":"deploy-gatsby-github-pages-gh-pages-github-actions"},"body":"- [Initial Context](#initial-context)\n  - [Setting up GitHub Actions secret](#setting-up-github-actions-secret)\n  - [Installing npm packages](#installing-npm-packages)\n- [Setup Deployment](#setup-deployment)\n  - [Making the deploy script](#making-the-deploy-script)\n  - [Setting up the GitHub Actions workflow](#setting-up-the-github-actions-workflow)\n- [Conclusion](#conclusion)\n- [Additional Resources](#additional-resources)\n\nThis tutorial will show you how to use gh-pages and GitHub Actions to automatically deploy a Gatsby project to Github Pages repo. These steps and scripts are currently in use on this site.\n\n## Initial Context\nThis guide assumes there are two git repos, one to house the Gatsby project code and one for the Github Pages public files. Each git repo will have these characteristics:\n\n- Gatsby project repo\n  - static site generator source files\n  - deploy script via package.json\n  - GitHub Actions workflow yaml file\n- GitHub Pages repo\n  - files in repo were generated via Gatsby project\n  - public web root for GitHub Pages\n    - https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site\n  - **NOTE:** For this tutorial, the git repo ```https://github.com/username/username.github.io.git``` is assumed\n\n### Setting up GitHub Actions secret\nIn order to transfer files from one GitHub repo to another, the GitHub Actions need an authentication token to commit to the correct repo; this is achieved via personal access tokens. Follow these steps to setup a secret for the personal access token.\n\n- Create the personal access token\n  - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\n  - **NOTE:** Token only needs repo access (read/write)\n- For the Gatsby project repo, store personal access token as a GitHub Actions secret\n  - https://docs.github.com/en/actions/security-guides/encrypted-secrets\n  - **NOTE:** In this tutorial, ```PERSONAL_ACCESS_TOKEN``` is used as the key\n\nThis secret will be used in both the deploy script and in the GitHub Actions workflow.\n\n### Installing npm packages\nFor the deploy script, two npm packages will be needed:\n\n- Install [Gatsby CLI](https://www.gatsbyjs.com/docs/reference/gatsby-cli/) globally\n  - **NOTE:** Most Gatsby projects may already have this installed globally.\n  - Run ```npm install -g gatsby-cli```\n- For the Gatsby project repo, install [gh-pages](https://github.com/tschaub/gh-pages) locally\n  - Run ```npm install --save-dev gh-pages```\n\n## Setup Deployment\nNow for the fun part! The next two scripts will work in tandem to deploy the Gatsby project to the Github Pages repo.\n\n### Making the deploy script\nAdd this npm script to the Gatsby project's ```project.json```.\n\n```json\n\"scripts\": {\n  ...\n  \"deploy\": \"gatsby build && gh-pages -d public -b main -r https://$PERSONAL_ACCESS_TOKEN@github.com/username/username.github.io.git\"\n}\n```\n\n- ```gatsby build``` will build the Gatsby site into the ```public``` directory\n- ```gh-pages``` will deploy the site with these flag arguments\n  - ```-d public``` is the directory name which is getting deployed\n  - ```-b main``` is the branch name of the destination repo\n  - ```-r https://$PERSONAL_ACCESS_TOKEN@github.com/username/username.github.io.git``` is the destination repo\n    - ```$PERSONAL_ACCESS_TOKEN``` is the authentication token which was [setup earlier](#setting-up-github-actions-secret)\n\n### Setting up the GitHub Actions workflow\nAdd this yaml file to the Gatsby project's ```.github/workflows``` directory. This tutorial will name the yaml file ```deploy.yaml```, resulting in ```.github/workflows/deploy.yaml```.\n\n```yaml\nname: Deploy site\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy-site:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout git branch\n      uses: actions/checkout@v3.0.0\n    - name: Setup Node.js\n      uses: actions/setup-node@v3.0.0\n      with:\n        node-version: '16'\n    - run: npm install\n    - name: Deploy site\n      run: |\n        npm run deploy -- -m \"deploy site via GitHub Actions\" -u \"github-actions-bot <support+actions@github.com>\"\n      env:\n        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n```\n\n- ```push``` command will trigger ths workflow on any ```git push``` to the ```main``` branch\n- ```uses: actions/checkout@v3.0.0``` checks out the ```main``` branch\n- ```uses: actions/setup-node@v3.0.0``` installs Node.js to the environment\n- ```- run: npm install``` installs npm packages dependencies\n- ```npm run deploy -- -m \"deploy site via GitHub Actions\" -u \"github-actions-bot <support+actions@github.com>\"``` will run the deploy script with extra arguments for ```gh-pages``` commit to the GitHub Pages repo\n  - ```-m \"deploy site via GitHub Actions\"``` is the commit message\n  - ```-u \"github-actions-bot <support+actions@github.com>\"``` is the commit user\n- ```PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}``` is how the GitHub Actions secret gets pass through to the ```package.json```\n\n## Conclusion\nThat's it! Any push to the Gatsby project GitHub repo will trigger an automatic build and deploy. Assuming ```username.github.io``` was the repo name and [GitHub Pages was configured](https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site), there should be a live site at ```https://username.github.io```!\n\n## Additional Resources\n- [https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/](https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/)\n- [https://github.com/tschaub/gh-pages](https://github.com/tschaub/gh-pages)\n- [https://www.xkoji.dev/blog/set-up-a-blog-with-gatsby-github-pages-and-github-actions/](https://www.xkoji.dev/blog/set-up-a-blog-with-gatsby-github-pages-and-github-actions/)\n","id":"e12f13ad-8fc9-5c09-bb7e-5f020cb6cbc6"},"next":{"frontmatter":{"title":"Top Software Development YouTubers"},"fields":{"slug":"top-software-development-youtubers"}}},{"previous":{"frontmatter":{"title":"How To Deploy Gatsby to GitHub Pages With gh-pages and GitHub Actions"},"fields":{"slug":"deploy-gatsby-github-pages-gh-pages-github-actions"}},"node":{"frontmatter":{"title":"Top Software Development YouTubers","description":"A opinionated guide to the best software development YouTube channels.","publishedDate":"2022-03-17","prettyPublishedDate":"Mar 17, 2022","modifiedDate":"2022-03-17","prettyModifiedDate":"Mar 17, 2022"},"fields":{"slug":"top-software-development-youtubers"},"body":"- [Hard Skills](#hard-skills)\n- [Soft Skills](#soft-skills)\n- [Humor](#humor)\n- [Wrap-up](#wrap-up)\n\nAs a self-confessed YouTube addict, I think watching YouTube videos is an effective tool for learning software development. YouTube videos are a useful tool in the learning toolkit because they are particularly good for captivating the audience, especially through humor, and they are convenient because they are available on demand. Here are my picks for the best software development YouTube channels, in no particular order:\n\n## Hard Skills\nThese YouTubers have great technical content; I mostly gravitate to web development specific channels.\n\n- [Fireship.io](https://www.youtube.com/c/Fireship) - A well-known developer's channel with incredible content on software development technology. The series '100 Seconds of Code' is fantastic and comes highly recommended.\n- [Kevin Powell](https://www.youtube.com/kepowob) - This is an awesome channel for staying up to date with HTML and CSS. Lots of writing on modern CSS and accessability.\n- [Jack Herrington](https://www.youtube.com/c/JackHerrington) - A great channel for staying up-to-date with JavaScript. Everything on JavaScript, front-end frameworks, and architecture.\n\n## Soft Skills\nThese YouTube channels feature excellent interviews and career guidance content.\n\n- [Engineering with Utsav](https://www.youtube.com/c/EngineeringwithUtsav) - An experienced developer's channel with a great resume and interview video series.\n- [Dorian Develops](https://www.youtube.com/c/DorianDevelops) - A channel run by a self-taught developer with excellent motivational and career advice.\n\n## Humor\nYouTube channels which poke fun at the software industry and developer culture <Emoji symbol=\"😆\" />.\n\n- [Krazam](https://www.youtube.com/c/KRAZAM) - Hilarious skits. A must-have subscription.\n\n## Wrap-up\nYouTube videos are fantastic for passing the time, and you may learn a lot from them. Please support outstanding content creators by liking their videos and subscribing to their channels, as a friendly reminder.\n","id":"a6d73a25-57da-55fb-b6d6-8319846d4c70"},"next":{"frontmatter":{"title":"Making This Site"},"fields":{"slug":"making-this-site"}}},{"previous":{"frontmatter":{"title":"Top Software Development YouTubers"},"fields":{"slug":"top-software-development-youtubers"}},"node":{"frontmatter":{"title":"Making This Site","description":"See the motivation and technical decisions in creating a personal website for a web developer.","publishedDate":"2022-03-10","prettyPublishedDate":"Mar 10, 2022","modifiedDate":"2022-03-10","prettyModifiedDate":"Mar 10, 2022"},"fields":{"slug":"making-this-site"},"body":"- [Motivation](#motivation)\n  - [Current Pages](#current-pages)\n- [Tech Stack](#tech-stack)\n  - [Bamboo CSS](#bamboo-css)\n  - [Gatsby](#gatsby)\n    - [Course / Resources](#course--resources)\n  - [GitHub Pages](#github-pages)\n- [Credits](#credits)\n  - [Logo (https://andynguyen.dev/logo.jpeg)](#logo-httpsandynguyendevlogojpeg)\n  - [Fonts](#fonts)\n- [Conclusion](#conclusion)\n\nAn inaugural first post to the blog <Emoji symbol=\"😎\" />, which goes through the motivation and technical decisions of making this site.\n\n## Motivation\nFor the past five years or so, my personal site has always been a single static HTML file with just my contact information. For 2022, I've decided to revamp the site to include a blog so I could:\n\n- show progression in both writing and software development\n- share knowledge via tutorials or opinionated posts\n\nHopefully, this site will highlight my progression in both crafts and provide me with something to reflect on in the future. Also, I've learnt a lot from individual blogs over my professional career and wanted to contribute something back. All in all, I believe that having a personal website is a good way to advance your professional development.\n\n### Current Pages\nCurrently, there are three pages and one template.\n- Home - `/`\n- About - `/about/`\n- Blog - `/blog/`\n- Blog Posts - `/blog/{post-slug}/`\n\n## Tech Stack\nFor this site, I chose three key technologies:\n\n- [Bamboo CSS](https://github.com/rilwis/bamboo), classless CSS library, for base styling\n- [Gatsby v4](https://www.gatsbyjs.com/), a React framework, for static site generation\n- [GitHub Pages](https://pages.github.com/) for hosting\n\n### Bamboo CSS\nNot being the best at CSS, I wanted a plug-and-play system and decided to go with a classless CSS library. Typically, a classless CSS library is for prototyping and is very lightweight. Luckily, I found [this handy repo](https://github.com/dbohdan/classless-css) and ended up on [Bamboo CSS](https://github.com/rilwis/bamboo) because it looked best to me and had customizable CSS variables. To customize the library/theme, I added my choice of fonts and switched out some colors. Overall, I enjoy using Bamboo CSS due to its lightweight and customizable nature. Alternatively, I think [Tailwind CSS](https://tailwindcss.com/) and [Open Props](https://open-props.style/) are interesting CSS systems to consider.\n\n### Gatsby\nAlready knowing React and wanting a static site (for SEO, security, and performance reasons), I naturally went with the [Gatsby](https://www.gatsbyjs.com/) ecosystem. Gatsby is a React-based framework with an incredible static site generator and plugin library. Coming from a JavaScript and WordPress background, the Gatsby (CLI and community) development experience has been fantastic. All in all, I highly recommend Gatsby for any blog or static site project, especially if you already know React. Otherwise, I believe [Astro](https://astro.build/) and [Next.js](https://nextjs.org/) are viable alternatives to Gatsby.\n\n#### Course / Resources\nI highly recommend these resources for anyone building a Gatsby project.\n\n- [Wes Bos' Master Gatsby](https://mastergatsby.com/) - highly recommended, Wes Bos is an awesome instructor\n- https://github.com/wesbos/master-gatsby\n- https://github.com/gatsbyjs/tutorial-example\n- https://github.com/gatsbyjs/gatsby-starter-blog\n- https://github.com/taniarascia/taniarascia.com\n- https://github.com/jlengstorf/gatsby-theme-jason-blog\n\n### GitHub Pages\nCurrently, this site is hosted on [GitHub Pages](https://pages.github.com/), and I didn't see a need to switch hosting providers. Using GitHub Pages is convenient because it's the same platform as the git repository. However, there is a potential downside: the git repo (for the free tier) needs to be public, which isn't problematic for a personal website like this one. Alternatively, I would consider [Netlify](https://www.netlify.com/) and [Cloudflare Pages](https://pages.cloudflare.com/).\n\nCheck out my tutorial about [deploying to GitHub Pages with gh-pages and GitHub Actions](/blog/deploy-gatsby-github-pages-gh-pages-github-actions/).\n\n## Credits\nAmazing creative assets I used:\n\n### Logo (https://andynguyen.dev/logo.jpeg)\n- Made with [Adobe Logo Maker](https://express.adobe.com/express-apps/logomaker/)\n  - Fonts: Lato-Regular,Bellfort\n  - Colors: F2EEE4,5065A8\n  - [Keyboard Icon](https://thenounproject.com/term/keyboard/9980)\n\n### Fonts\n  - [Inter](https://rsms.me/inter/) for sans-serif typeface\n  - [JetBrains Mono](https://www.jetbrains.com/lp/mono/) for monospace typeface\n\n## Conclusion\nIt's been a lot of fun putting this site together, especially going back to the basics (HTML and CSS).\nAnyone who wants to create their own personal website and have their own little part of the internet should do so.\n","id":"9a71aec0-3c2d-577f-9243-bc00909421fa"},"next":null}]},"site":{"siteMetadata":{"title":"Andy Nguyen","siteUrl":"https://andynguyen.dev","image":"https://andynguyen.dev/logo.jpeg","social":{"linkedinUrl":"https://www.linkedin.com/in/AndyN9/","githubUrl":"https://github.com/AndyN9"}}}},"pageContext":{"id":"146393b5-fa36-5607-bb26-93209c2b3a7f","fields__slug":"using-docker-wordpress-plugin-development","__params":{"fields__slug":"using-docker-wordpress-plugin-development"},"frontmatter":{"title":"Using Docker for WordPress Plugin Development","description":"Avoid the decision paralysis of deciding which local WordPress environment tool to use. The future is now! Use Docker to containerize your WordPress plugin development workflow.","published":true,"publishedDate":"2022-11-03","modifiedDate":"2022-11-03","categories":"","tags":""}}},"staticQueryHashes":["1166020649","3071343173","3749345761"]}